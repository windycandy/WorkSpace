1、HashMap的源码，实现原理，JDK8中对HashMap做了怎样的优化。

2、HaspMap扩容是怎样扩容的，为什么都是2的N次幂的大小。
https://blog.csdn.net/sidihuo/article/details/78489820

3、HashMap，HashTable，ConcurrentHashMap的区别。
https://www.cnblogs.com/heyonggang/p/9112731.html

4、极高并发下HashTable和ConcurrentHashMap哪个性能更好，为什么，如何实现的。

5、HashMap在高并发下如果没有处理线程安全会有怎样的安全隐患，具体表现是什么。

6、java中四种修饰符的限制范围。
    访问权限   类   包  子类  其他包
    public     ∨   ∨   ∨     ∨

    protect    ∨   ∨   ∨     ×

    default    ∨   ∨    ×     ×

    private    ∨    ×    ×     ×
	
	
7、Object类中的方法。

8、接口和抽象类的区别，注意JDK8的接口可以有实现。

9、动态代理的两种方式，以及区别。

10、Java序列化的方式。

11、传值和传引用的区别，Java是怎么样的，有没有传值引用。
https://www.cnblogs.com/chen-kh/p/6696303.html


12、一个ArrayList在循环过程中删除，会不会出问题，为什么。



https://blog.csdn.net/hzy38324/article/details/76405201

1、JVM的内存结构。

2、JVM方法栈的工作过程，方法栈和本地方法栈有什么区别。

3、JVM的栈中引用如何和堆中的对象产生关联。

4、可以了解一下逃逸分析技术。
http://www.importnew.com/23150.html

5、GC的常见算法，CMS以及G1的垃圾回收过程，CMS的各个阶段哪两个是Stop the world的，CMS会不会产生碎片，G1的优势。

6、标记清除和标记整理算法的理解以及优缺点。

7、eden survivor区的比例，为什么是这个比例，eden survivor的工作过程。

8、JVM如何判断一个对象是否该被GC，可以视为root的都有哪几种类型。
虚拟机栈中的引用对象
方法区中类静态属性引用的对象
方法区中常量引用对象
本地方法栈中JNI引用对象

9、强软弱虚引用的区别以及GC对他们执行怎样的操作。

10、Java是否可以GC直接内存。
https://www.jianshu.com/p/c81f8a93d42f
直接内存不受 GC(新生代的Minor GC)影响，只有当执行老年代的 Full GC时候才会顺便回收直接内存！

11、Java类加载的过程。

12、双亲委派模型的过程以及优势。

13、常用的JVM调优参数。
14、dump文件的分析。
15、Java有没有主动触发GC的方式（没有）。


1、B+树
2、快速排序，堆排序，插入排序（八大排序算法）
3、一致性Hash算法，一致性Hash算法的应用





Java并发编程
https://www.cnblogs.com/dolphin0520/category/602384.html

1、Java实现多线程有哪几种方式。
http://www.runoob.com/java/java-multithreading.html

2、Callable和Future的了解。
3、线程池的参数有哪些，在线程池创建一个线程的过程。
4、volitile关键字的作用，原理。
5、synchronized关键字的用法，优缺点。
6、Lock接口有哪些实现类，使用场景是什么。
7、可重入锁的用处及实现原理，写时复制的过程，读写锁，分段锁（ConcurrentHashMap中的segment）。
8、悲观锁，乐观锁，优缺点，CAS有什么缺陷，该如何解决。
9、ABC三个线程如何保证顺序执行。
10、线程的状态都有哪些。
11、sleep和wait的区别。
12、notify和notifyall的区别。
13、ThreadLocal的了解，实现原理。



1、分布式事务的控制。分布式锁如何设计。
2、分布式session如何设计。
3、dubbo的组件有哪些，各有什么作用。
4、zookeeper的负载均衡算法有哪些。
5、dubbo是如何利用接口就可以通信的。



1、SpringMVC的Controller是如何将参数和前端传来的数据一一对应的。
2、Mybatis如何找到指定的Mapper的，如何完成查询的。
3、Quartz是如何完成定时任务的。自定义注解的实现。
4、Spring使用了哪些设计模式。Spring的IOC有什么优势。
5、Spring如何维护它拥有的bean。
6、一些较新的东西JDK8的新特性，流的概念及优势，为什么有这种优势。
7、区块链了解如何设计双11交易总额面板，要做到高并发高可用



Java高并发编程 马士兵
http://www.cnblogs.com/tenWood/p/9338694.html(网友视频代码笔记)
synchronizer(同步器，在多个线程之间互相之间怎么进行通讯，同步等；):
	同步和非同步方法是否可以同时调用？
	对业务写方法加锁，对业务读方法不加锁，容易产生脏读问题（dirtyRead）
	一个同步方法可以调用另外一个同步方法：一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁.
	重入锁的另外一种情形，继承中子类的同步方法调用父类的同步方法
	synchronized同步方法如果遇到异常，锁就会被释放
	volatile关键字　-- jmm（java memory model）
		volatile并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized
		（volatile和synchronized区别？
		volatile只保证可见性，并不保证原子性；
		synchronized既保证可见性，又保证原子性；但效率要比volatile低不少；
		如果只需要保证可见性的时候，使用volatile，不要使用synchronized；）
	使用AtomXXX类  -- 方法原子，注意两个原子方法+起来没有原子性
	synchronized优化 -- 细粒度的锁执行效率要比粗粒度的锁执行效率要高不少
	避免将锁定对象的引用变成另外的对象，例子
	不要以字符串常量作为锁定对象
	wait和notify使用
	使用Latch（门闩）替代wait notify来进行通知 -- CountDownLatch，门闩的等待是不需要锁定任何对象的
	ReentrantLock，重入锁，其实synchronized也是可重入的，但是这把锁是和synchronized是有区别的，
		ReentrantLock是用新的同步方法写的时候经常用的一个工具；
		需要注意的是，必须要必须要必须要手动释放锁（重要的事情说三遍）;
		RenntrantLock的tryLock：
		ReentrantLock还可以调用lockInterruptibly方法，可以对线程interrupt方法做出响应;
		ReentrantLock还可以指定为公平锁;默认的synchronized全都是不公平锁；
		Lock和Condition;--对比两种方式，Condition的方式可以更加精确的指定哪些线程被唤醒
	ThreadLocal -- 	相当于每个线程都有自己的变量，互相之间不会产生冲突；
同步容器：jdk提供了同步性的容器，比如concurrentMap，concurrentList，BlockQueen等；->
ThreadPool：线程池，executor，
